10/16/21 08:10PM
EMBEDDED_DATA
	We had a struct called Embedded_Data, it looked like this:

	struct Embedded_Data_Information {
		int   data_unit_byte_size;
		int   data_bytes_num;
		int   data_bytes_max;
		DATA_ALTERATION_INFORMATION data_alteration_information;
	}; 
	typedef struct Embedded_Data_Information EMBEDDED_DATA_INFORMATION;

	struct Embedded_Data {
		char* name;
		void* data;
		PERMISSIONS  permissions;
		PERMISSIONS* permissions_previous;
		EMBEDDED_DATA_INFORMATION embedded_data_information;
	};
	typedef struct Embedded_Data EMBEDDED_DATA;

	As seen above this is where the void* data is contained (the same as found
	in Table). The reason for creating EMBEDDED_DATA was because our Log and
	Table structures had the same fields (name, data, permissions,
	permissions_previous). To avoid redundancy we thought to put these fields
	into a seperate structure which would then be included in Log and Table.
	After creating the structure we realized that fields such as data_bytes_num
	and data_byte_max would both be found in Log and Table (since we need to 
	track these to know when we need to realloc memory). For this reason we
	added these into a structure called Embedded_Data_Information and included
	this within Embedded_Data. After doing this we realized that altering the data
	would also be similar in Log and Table, so for this reason we added the
	methods neccesary for altering data, we also added tracking structures such as 
	Data_Alteration_Information to the file. Well we didn't add methods but the
	idea is still the same. 
	Inside the Data_Alteration_Information structure were the following structures,
	Data_Alteration_Information_Add, and Data_Alteration_Information_Remove. Since 
	LOG and TABLE both want to keep track of added data we needed a TABLE like 
	structure inside of EMBEDDED_DATA. We can't include TABLE itself because
	TABLE includes EMBEDDED_DATA so we would have structure recursion. For this
	reason we considered creating a minimal table which we called Scratch
	Table. Compared to TABLE which could add, insert, remove, shift, and assort
	data the Scratch Table could only add. Also both of these structures want
	Time Information/Statistics and Data Information/Statistics. The biggest
	issue with the Scratch Table is not the code redundancy but the fact that
	when the compiler is complete, it will have the ability to lean out TABLE
	into a Scratch Table. So we are implementing something twice.
	In conclusion, EMBEDDED_DATA consists of an incomplete set of data altering
	features and has redundancy and contains a double implemenation of features
	through the needed use of a Scratch Table. The only cons to NOT having
	EMBEDDED_DATA is using the same variables in multiple structures, for example
	LOG and TABLE both using name, but we can make it in a way so that LOG uses
	char* log_name, and TABLE uses char* table_name. We may continue working on
	this, but the only solution is creating a minimal structure which contains
	fields like name, and permissions. This could work however we then lose the 
	ability to use a structure specific variable name, ex. for LOG we use log_name.
	This concludes the following writeup as every point has been mentioned.

11/09/21 6:30PM
	1. removed library/embedded_data
	2. created library/TESTS/WORK-IN-PROGRESS
	3. inside library/TESTS/WORK-IN-PROGRESS we created struct_recursion.c
	4. started an entry in GCC_NOTES about struct_recursion and forward decl.	
